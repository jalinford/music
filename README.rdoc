This is a simple app that enables uploading of music. Especially designed for composers, but performers can use it as well. The app uses Foundation 4, ActiveAdmin, CarrierWave, and Active Admin Editor. You can see a sample here: http://evening-escarpment-1126.herokuapp.com

What follows is a fairly accurate sketch of building the application, but is not perfect! Please feel free to use.

$ rails new music

$ cd music

in Gemfile (after rails gem)
gem 'activeadmin'
gem "carrierwave"
gem 'active_admin_editor'

# Gems used only for assets and not required
# in production environments by default.
group :assets do
  gem 'sass-rails',   '~> 3.2.3'
  gem 'coffee-rails', '~> 3.2.1'

  # See https://github.com/sstephenson/execjs#readme for more supported runtimes
  # gem 'therubyracer', :platforms => :ruby

  gem 'uglifier', '>= 1.0.3'
  gem 'zurb-foundation'
end

gem "jquery-rails", "2.3.0"

group :development do
  gem 'sqlite3'
  gem 'rspec-rails', '~> 2.0'
end

group :test do
  gem 'sqlite3'
  gem 'rspec-rails', '~> 2.0'
end

group :production do
  gem 'pg'
end

$ bundle install

$ rails g foundation:install

In application.css - 
*= require active_admin/editor/wysiwyg

$ git init
$ git add .
$ git commit -m 'First Commit'
$ rails generate controller main index
$ rails g controller music index music

delete rails welcome file (index) in public

$ rails g active_admin:install
$ rails g active_admin:editor


Check if ActiveAdmin works, sign in with admin@example.com/password

In Routes:
root :to => 'main#index'
match 'music', :to => "music#index"

$ rake db:migrate

(if problems, make sure this is in admin_user model:
  devise :database_authenticatable, 
         :recoverable, :rememberable, :trackable, :validatable

  # Setup accessible (or protected) attributes for your model
  attr_accessible :email, :password, :password_confirmation, :remember_me
)

(If more problems, double check that root is above ActiveAdmin in Gemfile)

Partial for App Layouts - _header
In layouts: 

<header><%= render 'layouts/header' %></header>

<nav class="top-bar">
  <ul class="title-area">
    <li class="name">
      <h1><%= link_to "Example Photo Slideshows", root_path %></h1>
    </li>
    <li class="toggle-topbar menu-icon"><a href="#"><span>Menu</span></a></li>
  </ul>
  <section class="top-bar-section">
    <ul class="right">
      <li class="divider"></li>
      <li><%= link_to "Home", root_path %></li>
      <li class="divider"></li>
      <li><%= link_to "Music", music_path %></li>
    </ul>
  </section>
</nav>

$ git commit -am 'Second Commit'

$ rails g uploader audio

$ rails g model Piece title:string featured:boolean summary:text description:text

$ rails g model PieceSection piece_id:integer title:string audio_mp3:string audio_wav:string audio_ogg:string youtube:string description:text priority:integer

Change model to:
class Piece < ActiveRecord::Base
  attr_accessible ::title, :featured, :summary, :description, :piece_section_ids, :piece_sections_attributes
  validates_presence_of :title
  validates_uniqueness_of :title
  has_many :piece_sections, :dependent => :destroy
  accepts_nested_attributes_for :piece_sections
  scope :ordered, order("updated_at DESC")
end

class PieceSection < ActiveRecord::Base
  attr_accessible :piece_id, :title, :audio_mp3, :audio_wave, :audio_ogg, :description, :priority, :youtube
  mount_uploader :audio_mp3, AudioUploader
  mount_uploader :audio_mp3, AudioUploader
  mount_uploader :audio_mp3, AudioUploader
  belongs_to :piece
  accepts_nested_attributes_for :piece
  scope :ordered, order("priority DESC")
end

$ rails g active_admin:resource piece

$ rake db:migrate

Restart rails s

*Check how it looks in ActiveAdmin. If good - commit

$ git add .
$ git commit -m 'Models created'

add to audio_uploader

  # This is supposed to enable Heroku uploading
  def cache_dir
    "#{Rails.root}/tmp/uploads"
  end

  def extension_white_list
    %w(mp3 wav ogg)
  end

$ git add .
$ git commit -m "carrier wave added"

ActiveAdmin.register Piece do

  menu :parent => "Music"

  index do                            
  column :title
  column :featured
  column :summary
  default_actions                   
  end     


  form do |f|                         
  f.inputs "Activity Details" do       
    f.input :title
    f.input :featured, :as => :radio    
    f.input :summary, :hint => "Summary only displayed on index pages"  
    f.input :description, :as => :html_editor           

    f.has_many :piece_sections do |a|
      a.input :title
      a.input :audio_mp3, :hint => "Suggested: do mp3 and one other file type to insure browser compatibility"  
      a.input :audio_wav
      a.input :audio_ogg
      a.input :youtube, :hint => "use youtube embed full html"  
      a.input :priority, :as => :select, :collection => 1..10
      a.input :description, :as => :html_editor
      a.input :_destroy, :as=>:boolean, :required => false, :label=>'Check this box to remove the above section when Piece updated'
    end


  end                               
  f.actions                         
  end

  show do
  attributes_table do
    row :title
    row :featured
    row :summary
    row :description
      panel("Sectionss") do
        table_for piece.piece_sections do |piece_section|
        column :title
        column :priority
        column :description
        column("Audio") do |piece_section|
          a_array = Array.new
          a_array.push(piece_section.audio_mp3)
          a_array.push(piece_section.audio_wav)
          a_array.push(piece_section.audio_ogg)
        a_array.join(", ")
        end
        column :youtube
      end
      end
  end
  active_admin_comments
  end

end

*Check that it works

$ git add .
$ git commit -m 'Nested uploaders'

Modify the routes:

  match '/music/:title', :to => "music#music", as: 'piece'

  resources :music do
    resource :music
  end

Modify the controller:

class MusicController < ApplicationController
  def index
    @pieces = Piece.order("updated_at DESC")
    @featured_piecepiece = Piece.where(featured: true).order("updated_at DESC")
  end

  def music
    @piece = Piece.find_by_title(params[:title])
    @piece_sections = @piece.piece_sections
  end 
end

Modify the views:

music/index

<h1>All of the Music</h1>

<% if @pieces.count > 0 %>
<% @pieces.each do |piece| %>
<h2><%= piece.title %></h2>
<% unless piece.summary =="" %>
<p><%= piece.summary %></p>
<% end %>
<a href="<%= piece_path(:title => piece.title) %>" class="button round">More</a>
<% end %>
<% end %>

music/music

<h1><%= piece.title %></h1>
<%= piece.description.html_safe %>
<% @piece_sections.each do |piece_section| %>
<% unless piece_section.title == "" %>
<h3><%= piece_section.title %></h3>
<% end %>
<% unless piece_section.description == "" %>
<%= piece_section.description.html_safe %>
<% end %>
<% unless piece_section.youtube == "" %>
<div class="flex-video">
<iframe width="420" height="315" frameborder="0" allowfullscreen="" src="<%= piece_section.youtube %>"></iframe>
</div>
<% end %>
<% unless piece_section.audio_mp3 == "" &&  piece_section.audio_wav == "" &&  piece_section.audio_ogg == ""  %>
<audio controls>
<% unless piece_section.audio_mp3 == "" %>
<source src="<%= piece_section.audio_mp3_url.to_s %>" type="audio/mpeg" />
<% end %>
<% unless piece_section.audio_wav == "" %>
<source src="<%= piece_section.audio_wav_url.to_s %>" type="audio/wav" />
<% end %>
<% unless piece_section.audio_ogg == "" %>
<source src="<%= piece_section.audio_ogg_url.to_s %>" type="audio/ogg" />
<% end %>
Your browser does not support this audio file.
</audio controls>
<% end %>
<% end %>


Before deploying to Heroku, add to config/app
    config.assets.initialize_on_precompile = false
